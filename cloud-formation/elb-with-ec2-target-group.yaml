AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Ec2Instance1Id:
    Type: AWS::EC2::Instance::Id
    Description: An EC2 instance that is running with API back-end
    ConstraintDescription: must be a valid list of EC2 instance ids.
  Ec2Instance2Id:
    Type: String
    Description: An optional EC2 instance that is running with API back-ends. You have to provide it explicitly
    Default: ''
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
                    m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium]
    ConstraintDescription: must be a valid EC2 instance type.
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  VpcId:
    Description: VPC ID where a load balancer will operate
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: must be a valid VPC id
  LoadBalancerSubnets:
    Description: List of public Subnet Ids for the Load Balancer
    Type: List<AWS::EC2::Subnet::Id>
    ConstraintDescription: must be list of Subnet ids
  LoadBalancerCertificateArn:
    Description: 'Optional AMC Certificate ARN for Load balancer'
    Type: String
    Default: ''
  HealthCheckPath:
    Description: Healthcheck path to check whether an instance is healthy or not
    Type: String
    Default: '/health'

Conditions:
  HasLoadBalancerCertificateArn: !Not [!Equals [!Ref LoadBalancerCertificateArn, '']]
  HasSecondEc2InstanceId: !Not [!Equals [!Ref Ec2Instance2Id, '']]

Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Enable Http and Https access on the inbound port
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'ALB-${AWS::StackName}'
      SecurityGroups: [ !Ref LoadBalancerSecurityGroup ]
      Subnets: !Ref LoadBalancerSubnets
      Scheme: internet-facing

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref VpcId
      Port: !If [HasLoadBalancerCertificateArn, 443, 80]
      Protocol: HTTP
      TargetType: instance
##      Here you can add/register your EC2 targets by providing instance ids:
      Targets:
        - Id: !Ref Ec2Instance1Id
          Port: 80
        - !If
          - HasSecondEc2InstanceId
          - Id: !Ref Ec2Instance2Id
            Port: 80
          - !Ref AWS::NoValue
      Matcher:
        HttpCode: 200-299
      Name: !Sub '${AWS::StackName}-TG'
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - !If
          - HasLoadBalancerCertificateArn
          - Type: redirect
            RedirectConfig:
              Host: '#{host}'
              Path: '/#{path}'
              Port: 443
              Protocol: HTTPS
              Query: '#{query}'
              StatusCode: HTTP_301
          - Type: forward
            TargetGroupArn: !Ref TargetGroup

  LoadBalancerHTTPSListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: HasLoadBalancerCertificateArn
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Certificates:
        - CertificateArn: !Ref LoadBalancerCertificateArn
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ListenerHTTPSRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Condition: HasLoadBalancerCertificateArn
    Properties:
      ListenerArn: !Ref LoadBalancerHTTPSListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

#  InstanceSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      VpcId: !Ref VpcId
#      GroupDescription: Enable SSH access and HTTP access on the inbound port
#      SecurityGroupIngress:
#        - SourceSecurityGroupId: !GetAtt [ LoadBalancerSecurityGroup, GroupId ]
#          IpProtocol: -1
#        - IpProtocol: tcp
#          FromPort: '22'
#          ToPort: '22'
#          CidrIp: !Ref SSHLocation

Outputs:
  LoadBalancerPublicURL:
    Description: URL of the website
    Value: !Join ['', ['http://', !GetAtt [LoadBalancer, DNSName]]]
